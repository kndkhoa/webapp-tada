import React, { useState, useEffect } from "react";
import "./Signal.css";
import "./Controller-Strategy.css";
import controllermoreIcon from "./assets/icons/controller-more.png";
import TelegramNotification, { sendTadaServer1Message } from './TelegramNotification';

const ControllerMore = ({ userID, accountMT5, port_id, onUserDataUpdate }) => {
  const [isisEntryOn, setIsisEntryOn] = useState(false);
  const [isisReverseOn, setIsisReverseOn] = useState(false);
  const [isModified, setIsModified] = useState(false);

  // üî• H√†m c·∫≠p nh·∫≠t state t·ª´ sessionStorage (Load d·ªØ li·ªáu m·ªõi nh·∫•t)
  const updateStateFromStorage = () => {
    const cachedUserData = JSON.parse(sessionStorage.getItem("userData"));

    if (cachedUserData && Array.isArray(cachedUserData.trading_accounts)) {
      const currentAccount = cachedUserData.trading_accounts.find(
        (account) => account.accountMT5 === accountMT5
      );
      if (currentAccount && Array.isArray(currentAccount.following_channels)) {
        const followingChannels = currentAccount.following_channels;

        // Ki·ªÉm tra xem t·∫•t c·∫£ channels c√≥ isEntry = 1 kh√¥ng
        const allIsEntryOn = followingChannels.length > 0 && 
          followingChannels.every((channel) => channel.isEntry === 1);
        setIsisEntryOn(allIsEntryOn);

        // Ki·ªÉm tra xem t·∫•t c·∫£ channels c√≥ isReverse = 1 kh√¥ng
        const allisReverseOn = followingChannels.length > 0 && 
          followingChannels.every((channel) => channel.isReverse === 1);
        setIsisReverseOn(allisReverseOn);
      }
    }
  };

  // üî• Khi component mount, l·∫•y d·ªØ li·ªáu t·ª´ sessionStorage
  useEffect(() => {
    updateStateFromStorage();
  }, [accountMT5]);

  // üî• H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t Save
  const handleSave = async () => {
    try {
      const cachedUserData = JSON.parse(sessionStorage.getItem("userData"));
      if (!cachedUserData || !Array.isArray(cachedUserData.trading_accounts)) {
        throw new Error("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu t√†i kho·∫£n trong sessionStorage");
      }

      const currentAccount = cachedUserData.trading_accounts.find(
        (account) => account.accountMT5 === accountMT5
      );
      if (!currentAccount || !Array.isArray(currentAccount.following_channels)) {
        throw new Error("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ho·∫∑c danh s√°ch channels");
      }

      const followingChannels = currentAccount.following_channels;
      let lastConfigString = ""; // L∆∞u config c·ªßa l·∫ßn g·ªçi API cu·ªëi c√πng
      let apiCallCount = 0; // ƒê·∫øm s·ªë l·∫ßn g·ªçi API

      // G·ª≠i API tu·∫ßn t·ª± cho t·ª´ng channel
      for (const channel of followingChannels) {
        const payload = {
          userID: userID,
          accountMT5: accountMT5,
          channel_id: channel.channel_id,
          isEntry: isisEntryOn ? 1 : 0,
          isReverse: isisReverseOn ? 1 : 0,
        };

        console.log(`G·ª≠i API cho channel ${channel.channel_id} (l·∫ßn ${apiCallCount + 1}):`, payload);

        // G·ªçi API POST
        const response = await fetch("https://admin.tducoin.com/api/signal/channelcontroller", {
          method: "POST",
          headers: {
            "x-api-key": "oqKbBxKcEn9l4IXE4EqS2sgNzXPFvE",
            "Content-Type": "application/json",
          },
          body: JSON.stringify(payload),
        });

        apiCallCount++; // TƒÉng s·ªë l·∫ßn g·ªçi API

        if (!response.ok) {
          const errorResponse = await response.json();
          console.error("API Error Response cho channel", channel.channel_id, ":", errorResponse);
          <TelegramNotification
            message={
              "L·ªói POST Save t√πy ch·ªânh component More Options cho channel " +
              channel.channel_id +
              ": " +
              errorResponse.message +
              " t·ª´ user " +
              userID
            }
          />;
          throw new Error(`API th·∫•t b·∫°i cho channel ${channel.channel_id}`);
        }

        // L·∫•y d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API (chu·ªói config)
        lastConfigString = await response.text();
        console.log(`Config t·ª´ API cho channel ${channel.channel_id}:`, lastConfigString);
      }

      // G·ª≠i tin nh·∫Øn Telegram ch·ªâ m·ªôt l·∫ßn v·ªõi config cu·ªëi c√πng
      if (apiCallCount > 0) {
        const message = `${lastConfigString},${port_id}`;
        await sendTadaServer1Message(message);
      }

      // üî• C·∫≠p nh·∫≠t sessionStorage ngay sau khi API th√†nh c√¥ng
      const updatedTradingAccounts = cachedUserData.trading_accounts.map((account) =>
        account.accountMT5 === accountMT5
          ? {
              ...account,
              following_channels: account.following_channels.map((channel) => ({
                ...channel,
                isEntry: isisEntryOn ? 1 : 0, // C·∫≠p nh·∫≠t t·∫•t c·∫£ channels
                isReverse: isisReverseOn ? 1 : 0, // Gi·ªØ nguy√™n t√™n isReverse
              })),
            }
          : account
      );

      const updatedUserData = {
        ...cachedUserData,
        trading_accounts: updatedTradingAccounts,
      };

      // L∆∞u v√†o sessionStorage
      sessionStorage.setItem("userData", JSON.stringify(updatedUserData));

      // üî• C·∫≠p nh·∫≠t UI t·ª´ d·ªØ li·ªáu m·ªõi
      setIsisEntryOn(isisEntryOn);
      setIsisReverseOn(isisReverseOn);
      setIsModified(false);

      // üî• G·ªçi callback ƒë·ªÉ c·∫≠p nh·∫≠t `FundBot.js`
      if (onUserDataUpdate) {
        onUserDataUpdate(updatedTradingAccounts);
      }
    } catch (error) {
      console.error("Error saving data:", error);
      <TelegramNotification
        message={
          "L·ªói POST Save t√πy ch·ªânh component More Options: " +
          error.message +
          " t·ª´ user " +
          userID
        }
      />;
      alert(`Failed to save settings. Error: ${error.message}`);
    }
  };

  return (
    <div className="signal-container">
      <div className="portfolio-header-title">
        <img src={controllermoreIcon} alt="Balance Icon" className="portfolio-icon" />
        <span>More Options</span>
      </div>
      <hr className="portfolio-divider-fullwidth" />

      <div className="signal-body">
        {/* Place Stop Loss to Entry */}
        <div className="signal-body-item">
          <span className="icon">‚öñÔ∏è</span>
          <span className="text">Place Stop Loss to Entry</span>
          <div className="strategy-toggle">
            <div
              className={`strategy-switch ${isisEntryOn ? "on" : "off"}`}
              onClick={() => {
                setIsisEntryOn(!isisEntryOn);
                setIsModified(true);
              }}
            >
              <div className="strategy-knob"></div>
            </div>
          </div>
        </div>

        {/* Trade against all auto-followed signals */}
        <div className="signal-body-item">
          <span className="icon">üß†</span>
          <span className="text">Trade against all auto-followed signals</span>
          <div className="strategy-toggle">
            <div
              className={`strategy-switch ${isisReverseOn ? "on" : "off"}`}
              onClick={() => {
                setIsisReverseOn(!isisReverseOn);
                setIsModified(true);
              }}
            >
              <div className="strategy-knob"></div>
            </div>
          </div>
        </div>
      </div>

      {/* N√∫t Save */}
      {isModified && (
        <div className="strategy-footer">
          <button className="strategy-footer-button" onClick={handleSave}>
            Save
          </button>
        </div>
      )}
    </div>
  );
};

export default ControllerMore;
