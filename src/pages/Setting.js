import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import "./Setting.css";
import backIcon from "../components/assets/icons/back.png";
import naptienIcon from "../components/assets/icons/naptien.png";
import ruttienIcon from "../components/assets/icons/ruttien.png";
import acIcon from "../components/assets/icons/coin-header.png";
import bg from "../components/assets/bg-setting.jpg";
import SettingMenu from "../components/Setting-Menu";
import About from "../components/About";
import Terms from "../components/Terms";
import Language from "../components/Language";
import Profile from "../components/Profile";
import BuyAC from "../components/BuyAC"; // Import component BuyAC

import { motion, AnimatePresence } from "framer-motion";
import { ReloadSkeleton, PreloadImage } from "../components/waiting";

function Setting() {
  const { id } = useParams();
  const [userData, setUserData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [selectedMenu, setSelectedMenu] = useState(null);
  const [isMenuSelected, setIsMenuSelected] = useState(false);
  const [showBuyAC, setShowBuyAC] = useState(false); // State ƒë·ªÉ hi·ªÉn th·ªã BuyAC modal

  // L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ sessionStorage ch·ªâ m·ªôt l·∫ßn khi component mount
  useEffect(() => {
    const cachedUserData = sessionStorage.getItem("userData");
    if (cachedUserData) {
      const parsedUserData = JSON.parse(cachedUserData);
      setUserData(parsedUserData); // C·∫≠p nh·∫≠t state khi c√≥ d·ªØ li·ªáu
    } else {
      console.error("No user data found in sessionStorage!");
    }
    setLoading(false); // C·∫≠p nh·∫≠t tr·∫°ng th√°i sau khi d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l·∫•y
  }, []); // Ch·ªâ g·ªçi m·ªôt l·∫ßn khi component mount

  // State ƒë·ªÉ l∆∞u tr·∫°ng th√°i hi·ªÉn th·ªã c·ªßa t·ª´ng gi√° tr·ªã
  const [showFullAC, setShowFullAC] = useState(false);

  // N·∫øu d·ªØ li·ªáu ng∆∞·ªùi d√πng ch∆∞a ƒë∆∞·ª£c t·∫£i xong, hi·ªÉn th·ªã tr·∫°ng th√°i ch·ªù
  if (loading) {
    return <div>ƒêang t·∫£i d·ªØ li·ªáu...</div>;
  }

  // Ki·ªÉm tra d·ªØ li·ªáu ng∆∞·ªùi d√πng c√≥ ƒë√∫ng v·ªõi id t·ª´ URL
  const user = userData && userData.userID === id ? userData : null;

  // N·∫øu kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi id t∆∞∆°ng ·ª©ng
  if (!user) {
    return <div>Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt</div>;
  }

  const BASE_URL = "https://admin.tducoin.com/public/storage/";
  const picUrl = `${BASE_URL}${user.avatar}`; // M·∫∑c ƒë·ªãnh l√† chu·ªói r·ªóng n·∫øu userData l√† null

  const handleMenuSelect = (menu) => {
    setSelectedMenu(menu);
    setIsMenuSelected(true);
  };

  const handleBack = () => {
    setSelectedMenu(null);
    setIsMenuSelected(false);
  };

  return (
    <div className="setting-detail-container">
      <div className="bannersetting-header">
        <button className="backIcon" onClick={() => window.history.back()}>
          <img src={backIcon} alt="Back Icon" className="backIconImage" />
        </button>
        <img src={bg} alt="Banner" className="bannersetting-image" />
        <div className="avatarsetting-container">
          <div className="avatarsetting">
            <PreloadImage
              src={picUrl} // S·ª≠ d·ª•ng URL c·ªßa avatar ho·∫∑c ·∫£nh ng∆∞·ªùi d√πng ·ªü ƒë√¢y
              alt="Avatar"            
            />
          </div>
        </div>
      </div>
      <div className="setting-detail-content">      
        <div className="setting-detail-row">
          {/* AC */}
          <div
            className="setting-detail-item"
            onClick={() => setShowFullAC((prev) => !prev)}
          >
            <img
              src={acIcon}
              alt="Icon"
              className="setting-detail-item-icon"
            />
            <div className="setting-detail-item-text">
              <span className="setting-detail-item-text-small">AC</span>
              <span className="setting-detail-item-text-large">
                {showFullAC ? userData.wallet_AC : formatNumber(userData.wallet_AC)}
              </span>
            </div>
          </div>

          {/* NAÃ£P RUÃÅT */}
          <div
            className="setting-detail-item setting-detail-item-deposit"
            onClick={() => setShowBuyAC(true)}
          >
            <img
              src={naptienIcon}
              alt="Icon"
              className="setting-coin-icon"
            />
            <div className="setting-detail-item-text setting-detail-item-text-naprut">
              <span className="setting-coin-button">
                Buy AC
              </span>
            </div>
          </div>
          <div
            className="setting-detail-item setting-detail-item-withdraw"
          >
            <img
              src={ruttienIcon}
              alt="Icon"
              className="setting-coin-icon"
            />
            <div className="setting-detail-item-text setting-detail-item-text-naprut">
              <span className="setting-coin-button">
                Withdraw
              </span>
            </div>
          </div>
        </div>
        
        {showBuyAC && (
        <div className="report-modal">
          <BuyAC 
            userID={userData.userID} 
            walletAC={userData.wallet_AC} 
            onClose={() => setShowBuyAC(false)}
          />
        </div>
        )}

        {/* üî• N·ªôi dung ch√≠nh (SettingMenu, Profile, Language, Terms, About) */}
        {!isMenuSelected ? (
          <SettingMenu onMenuSelect={handleMenuSelect} />
        ) : (
          <div>
            {selectedMenu === "profile" && <Profile user={user} onBack={handleBack} />}
            {selectedMenu === "language" && <Language onBack={handleBack} />}
            {selectedMenu === "terms" && <Terms onBack={handleBack} />}
            {selectedMenu === "about" && <About onBack={handleBack} />}
          </div>
        )}
      </div>
    </div>
  );
}

function formatNumber(value) {
  if (value >= 1_000_000) {
    return `${(value / 1_000_000).toFixed(1)}M`; // Hi·ªÉn th·ªã d·∫°ng 'x.xM'
  } else if (value >= 1_000) {
    return `${(value / 1_000).toFixed(1)}K`; // Hi·ªÉn th·ªã d·∫°ng 'x.xK'
  }
  return value.toString(); // Tr·∫£ v·ªÅ gi√° tr·ªã g·ªëc n·∫øu nh·ªè h∆°n 1,000
}

export default Setting;
