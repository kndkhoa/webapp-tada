{"ast":null,"code":"import _objectSpread from\"/Users/hcmhoh02hhul217/Documents/web/webapp-tada/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/components/questions.js\nimport{useState,useEffect}from'react';/**\r\n * Hàm xáo trộn mảng sử dụng thuật toán Fisher-Yates\r\n * @param {Array} array - Mảng cần xáo trộn\r\n * @returns {Array} - Mảng đã được xáo trộn\r\n */const shuffleArray=array=>{const shuffled=[...array];// Tạo một bản sao của mảng để không thay đổi mảng gốc\nfor(let i=shuffled.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[shuffled[i],shuffled[j]]=[shuffled[j],shuffled[i]];}return shuffled;};/**\r\n * Custom Hook để lấy và xử lý câu hỏi từ API\r\n * @param {string} qa_id - ID của bộ câu hỏi\r\n * @returns {Object} - Trả về câu hỏi, trạng thái tải và lỗi\r\n */const useQuestions=qa_id=>{const[questions,setQuestions]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{/**\r\n     * Hàm lấy dữ liệu câu hỏi từ API\r\n     */const fetchQuestions=async()=>{try{const response=await fetch(\"http://admin.tducoin.com/api/quiz/qa/\".concat(qa_id),{method:'GET',headers:{'x-api-key':'oqKbBxKcEn9l4IXE4EqS2sgNzXPFvE','Content-Type':'application/json'}});const data=await response.json();if(data.success){// Định dạng dữ liệu nhận được từ API\nlet formattedQuestions=data.data.map(item=>({question:item.question,answers:[item.incorrectAnswer_1,item.incorrectAnswer_2,item.incorrectAnswer_3,item.correctAnswer],correctAnswer:item.correctAnswer}));// Xáo trộn thứ tự các câu hỏi\nformattedQuestions=shuffleArray(formattedQuestions);// Xáo trộn thứ tự các đáp án trong mỗi câu hỏi\nformattedQuestions=formattedQuestions.map(q=>_objectSpread(_objectSpread({},q),{},{answers:shuffleArray(q.answers)}));setQuestions(formattedQuestions);}else{throw new Error(data.message||'Failed to fetch questions');}}catch(err){setError(err.message);}finally{setLoading(false);}};if(qa_id){fetchQuestions();}},[qa_id]);return{questions,loading,error};};export default useQuestions;","map":{"version":3,"names":["useState","useEffect","shuffleArray","array","shuffled","i","length","j","Math","floor","random","useQuestions","qa_id","questions","setQuestions","loading","setLoading","error","setError","fetchQuestions","response","fetch","concat","method","headers","data","json","success","formattedQuestions","map","item","question","answers","incorrectAnswer_1","incorrectAnswer_2","incorrectAnswer_3","correctAnswer","q","_objectSpread","Error","message","err"],"sources":["/Users/hcmhoh02hhul217/Documents/web/webapp-tada/src/components/questions.js"],"sourcesContent":["// src/components/questions.js\r\nimport { useState, useEffect } from 'react';\r\n\r\n/**\r\n * Hàm xáo trộn mảng sử dụng thuật toán Fisher-Yates\r\n * @param {Array} array - Mảng cần xáo trộn\r\n * @returns {Array} - Mảng đã được xáo trộn\r\n */\r\nconst shuffleArray = (array) => {\r\n  const shuffled = [...array]; // Tạo một bản sao của mảng để không thay đổi mảng gốc\r\n  for (let i = shuffled.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n  }\r\n  return shuffled;\r\n};\r\n\r\n/**\r\n * Custom Hook để lấy và xử lý câu hỏi từ API\r\n * @param {string} qa_id - ID của bộ câu hỏi\r\n * @returns {Object} - Trả về câu hỏi, trạng thái tải và lỗi\r\n */\r\nconst useQuestions = (qa_id) => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    /**\r\n     * Hàm lấy dữ liệu câu hỏi từ API\r\n     */\r\n    const fetchQuestions = async () => {\r\n      try {\r\n        const response = await fetch(`http://admin.tducoin.com/api/quiz/qa/${qa_id}`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'x-api-key': 'oqKbBxKcEn9l4IXE4EqS2sgNzXPFvE',\r\n            'Content-Type': 'application/json',\r\n          },\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (data.success) {\r\n          // Định dạng dữ liệu nhận được từ API\r\n          let formattedQuestions = data.data.map((item) => ({\r\n            question: item.question,\r\n            answers: [\r\n              item.incorrectAnswer_1,\r\n              item.incorrectAnswer_2,\r\n              item.incorrectAnswer_3,\r\n              item.correctAnswer,\r\n            ],\r\n            correctAnswer: item.correctAnswer,\r\n          }));\r\n\r\n          // Xáo trộn thứ tự các câu hỏi\r\n          formattedQuestions = shuffleArray(formattedQuestions);\r\n\r\n          // Xáo trộn thứ tự các đáp án trong mỗi câu hỏi\r\n          formattedQuestions = formattedQuestions.map((q) => ({\r\n            ...q,\r\n            answers: shuffleArray(q.answers),\r\n          }));\r\n\r\n          setQuestions(formattedQuestions);\r\n        } else {\r\n          throw new Error(data.message || 'Failed to fetch questions');\r\n        }\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (qa_id) {\r\n      fetchQuestions();\r\n    }\r\n  }, [qa_id]);\r\n\r\n  return { questions, loading, error };\r\n};\r\n\r\nexport default useQuestions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}