{"ast":null,"code":"var _s = $RefreshSig$();\n// src/components/questions.js\nimport { useState, useEffect } from 'react';\n\n/**\r\n * Hàm xáo trộn mảng sử dụng thuật toán Fisher-Yates\r\n * @param {Array} array - Mảng cần xáo trộn\r\n * @returns {Array} - Mảng đã được xáo trộn\r\n */\nconst shuffleArray = array => {\n  const shuffled = [...array]; // Tạo một bản sao của mảng để không thay đổi mảng gốc\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n};\n\n/**\r\n * Custom Hook để lấy và xử lý câu hỏi từ API\r\n * @param {string} qa_id - ID của bộ câu hỏi\r\n * @returns {Object} - Trả về câu hỏi, trạng thái tải và lỗi\r\n */\nconst useQuestions = qa_id => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    /**\r\n     * Hàm lấy dữ liệu câu hỏi từ API\r\n     */\n    const fetchQuestions = async () => {\n      try {\n        const response = await fetch(`http://admin.tducoin.com/api/quiz/qa/${qa_id}`, {\n          method: 'GET',\n          headers: {\n            'x-api-key': 'oqKbBxKcEn9l4IXE4EqS2sgNzXPFvE',\n            'Content-Type': 'application/json'\n          }\n        });\n        const data = await response.json();\n        if (data.success) {\n          // Định dạng dữ liệu nhận được từ API\n          let formattedQuestions = data.data.map(item => ({\n            question: item.question,\n            answers: [item.incorrectAnswer_1, item.incorrectAnswer_2, item.incorrectAnswer_3, item.correctAnswer],\n            correctAnswer: item.correctAnswer\n          }));\n\n          // Xáo trộn thứ tự các câu hỏi\n          formattedQuestions = shuffleArray(formattedQuestions);\n\n          // Xáo trộn thứ tự các đáp án trong mỗi câu hỏi\n          formattedQuestions = formattedQuestions.map(q => ({\n            ...q,\n            answers: shuffleArray(q.answers)\n          }));\n          setQuestions(formattedQuestions);\n        } else {\n          throw new Error(data.message || 'Failed to fetch questions');\n        }\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (qa_id) {\n      fetchQuestions();\n    }\n  }, [qa_id]);\n  return {\n    questions,\n    loading,\n    error\n  };\n};\n_s(useQuestions, \"WUsELgM7HPnM2MO/4+fW4oQbMK8=\");\nexport default useQuestions;","map":{"version":3,"names":["useState","useEffect","shuffleArray","array","shuffled","i","length","j","Math","floor","random","useQuestions","qa_id","_s","questions","setQuestions","loading","setLoading","error","setError","fetchQuestions","response","fetch","method","headers","data","json","success","formattedQuestions","map","item","question","answers","incorrectAnswer_1","incorrectAnswer_2","incorrectAnswer_3","correctAnswer","q","Error","message","err"],"sources":["/Users/hcmhoh02hhul217/Documents/web/webapp-tada/src/components/questions.js"],"sourcesContent":["// src/components/questions.js\r\nimport { useState, useEffect } from 'react';\r\n\r\n/**\r\n * Hàm xáo trộn mảng sử dụng thuật toán Fisher-Yates\r\n * @param {Array} array - Mảng cần xáo trộn\r\n * @returns {Array} - Mảng đã được xáo trộn\r\n */\r\nconst shuffleArray = (array) => {\r\n  const shuffled = [...array]; // Tạo một bản sao của mảng để không thay đổi mảng gốc\r\n  for (let i = shuffled.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n  }\r\n  return shuffled;\r\n};\r\n\r\n/**\r\n * Custom Hook để lấy và xử lý câu hỏi từ API\r\n * @param {string} qa_id - ID của bộ câu hỏi\r\n * @returns {Object} - Trả về câu hỏi, trạng thái tải và lỗi\r\n */\r\nconst useQuestions = (qa_id) => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    /**\r\n     * Hàm lấy dữ liệu câu hỏi từ API\r\n     */\r\n    const fetchQuestions = async () => {\r\n      try {\r\n        const response = await fetch(`http://admin.tducoin.com/api/quiz/qa/${qa_id}`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'x-api-key': 'oqKbBxKcEn9l4IXE4EqS2sgNzXPFvE',\r\n            'Content-Type': 'application/json',\r\n          },\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (data.success) {\r\n          // Định dạng dữ liệu nhận được từ API\r\n          let formattedQuestions = data.data.map((item) => ({\r\n            question: item.question,\r\n            answers: [\r\n              item.incorrectAnswer_1,\r\n              item.incorrectAnswer_2,\r\n              item.incorrectAnswer_3,\r\n              item.correctAnswer,\r\n            ],\r\n            correctAnswer: item.correctAnswer,\r\n          }));\r\n\r\n          // Xáo trộn thứ tự các câu hỏi\r\n          formattedQuestions = shuffleArray(formattedQuestions);\r\n\r\n          // Xáo trộn thứ tự các đáp án trong mỗi câu hỏi\r\n          formattedQuestions = formattedQuestions.map((q) => ({\r\n            ...q,\r\n            answers: shuffleArray(q.answers),\r\n          }));\r\n\r\n          setQuestions(formattedQuestions);\r\n        } else {\r\n          throw new Error(data.message || 'Failed to fetch questions');\r\n        }\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (qa_id) {\r\n      fetchQuestions();\r\n    }\r\n  }, [qa_id]);\r\n\r\n  return { questions, loading, error };\r\n};\r\n\r\nexport default useQuestions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}